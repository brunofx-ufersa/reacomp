---
title: "LValues e RValues"
lang: pt-BR
toc-title: Conte√∫do
description: "Entendendo o que s√£o lvalue e rvalue em C"
author: "Bruno Xavier"
date: "2025-10-18"
categories:
  - algoritmo
---


# Introdu√ß√£o

Se voc√™ j√° levou uma bronca do compilador com uma mensagem parecida com esta:

```{.console code-line-numbers="false"}
error: lvalue required as left operand of assignment
```

‚Ä¶ ent√£o parab√©ns üòÖ voc√™ acabou de esbarrar em um dos conceitos fundamentais da linguagem C: _lvalue_ e _rvalue_.

Esses dois nomes parecem sa√≠dos de um feiti√ßo do Harry Potter, mas s√£o bem mais simples do que parecem.
Eles est√£o ligados a como o C enxerga o que pode ou n√£o receber um valor.

## O que √© um lvalue?

A palavra **lvalue** vem de "left value", ou "valor que pode estar √† esquerda", do sinal de igual (=).
Em outras palavras, um lvalue √© algo que tem um endere√ßo na mem√≥ria e pode armazenar um valor.

Pense no lvalue como uma caixinha com nome, onde o programa guarda um dado.

```{.c code-line-numbers="false"}
int x = 10;  // x √© um lvalue
x = 20;      // tudo certo, estamos mudando o valor de x
```


Aqui, `x` √© um _lvalue_. Ele existe em algum lugar da mem√≥ria e pode receber outro valor quando quisermos.

## E o rvalue?

O **rvalue**, por outro lado, vem de "right value", ou "valor que fica √† direita" do sinal de igual.
Ele √© o valor em si, n√£o um local da mem√≥ria.

```{.c code-line-numbers="false"}
int x = 10;
int y = x + 5; // x + 5 √© um rvalue
```

A express√£o `x + 5` √© um _rvalue_. Ela √© apenas o resultado de uma conta, um n√∫mero tempor√°rio que "nasce e morre" dentro dessa linha. Ele n√£o mora em lugar nenhum, ent√£o n√£o d√° pra armazenar nada nele.

## Ligando os pontos

Em toda atribui√ß√£o, temos a mesma estrutura:

- lvalue = rvalue;
- O lvalue est√° √† esquerda e precisa ser algo que possa receber um valor.
- O rvalue est√° √† direita e √© o valor que ser√° guardado.

‚úÖ Exemplo certo:

```{.c code-line-numbers="false"}
int a, b;
a = b + 2;
```

(`a` √© lvalue, `b + 2` √© rvalue)

‚ùå Exemplo errado:

```{.c code-line-numbers="false"}
int a, b;
a + b = 2;
```

O compilador vai dizer:

```{.console code-line-numbers="false"}
error: lvalue required as left operand of assignment
```

Porque `a + b` n√£o √© um "lugar" da mem√≥ria, mas apenas o resultado de uma soma.

üß† Mais exemplos r√°pidos

| C√≥digo	| Pode compilar?	| Por qu√™ |
|---------|-----------------|---------|
| `x = 5;` |	‚úÖ	| `x` √© lvalue, `5` √© rvalue |
| `5 = x;` |	‚ùå	| Literal `5` n√£o pode receber valor |
| `*ptr = 10;` |	‚úÖ	| `*ptr` √© um lvalue (aponta pra um endere√ßo) |
| `ptr + 1 = x;` |	‚ùå	| Resultado de `ptr + 1` √© tempor√°rio |
| `++x;` |	‚úÖ	| `x` tem endere√ßo, pode ser alterado |
| `++(x + 1);` |	‚ùå	| `x + 1` √© rvalue, n√£o existe na mem√≥ria |



Resumindo

| Tipo	| Pode estar √† esquerda do =?	| Tem endere√ßo? |
|-------|-----------------------------|----------------|
| lvalue |	‚úÖ Sim	| ‚úÖ Sim |
| rvalue |	‚ùå N√£o	| ‚ö†Ô∏è N√£o acess√≠vel |


---

Nesta tutorial, voc√™ aprendeu

‚úÖ os conceitos de lvalue e rvalue

‚úÖ a evitar erros de compila√ß√£o envolvendo lvalue

‚úÖ como o C pensa internamente 

